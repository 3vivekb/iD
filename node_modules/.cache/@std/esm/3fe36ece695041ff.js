"main";let assignMergeValue;_695‍.w('./_assignMergeValue.js',[["default",function(v){assignMergeValue=v}]]);let cloneBuffer;_695‍.w('./_cloneBuffer.js',[["default",function(v){cloneBuffer=v}]]);let cloneTypedArray;_695‍.w('./_cloneTypedArray.js',[["default",function(v){cloneTypedArray=v}]]);let copyArray;_695‍.w('./_copyArray.js',[["default",function(v){copyArray=v}]]);let initCloneObject;_695‍.w('./_initCloneObject.js',[["default",function(v){initCloneObject=v}]]);let isArguments;_695‍.w('./isArguments.js',[["default",function(v){isArguments=v}]]);let isArray;_695‍.w('./isArray.js',[["default",function(v){isArray=v}]]);let isArrayLikeObject;_695‍.w('./isArrayLikeObject.js',[["default",function(v){isArrayLikeObject=v}]]);let isBuffer;_695‍.w('./isBuffer.js',[["default",function(v){isBuffer=v}]]);let isFunction;_695‍.w('./isFunction.js',[["default",function(v){isFunction=v}]]);let isObject;_695‍.w('./isObject.js',[["default",function(v){isObject=v}]]);let isPlainObject;_695‍.w('./isPlainObject.js',[["default",function(v){isPlainObject=v}]]);let isTypedArray;_695‍.w('./isTypedArray.js',[["default",function(v){isTypedArray=v}]]);let toPlainObject;_695‍.w('./toPlainObject.js',[["default",function(v){toPlainObject=v}]]);














/**
 * A specialized version of `baseMerge` for arrays and objects which performs
 * deep merges and tracks traversed objects enabling objects with circular
 * references to be merged.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {string} key The key of the value to merge.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} mergeFunc The function to merge values.
 * @param {Function} [customizer] The function to customize assigned values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */
function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
  var objValue = object[key],
      srcValue = source[key],
      stacked = stack.get(srcValue);

  if (stacked) {
    assignMergeValue(object, key, stacked);
    return;
  }
  var newValue = customizer
    ? customizer(objValue, srcValue, (key + ''), object, source, stack)
    : undefined;

  var isCommon = newValue === undefined;

  if (isCommon) {
    var isArr = isArray(srcValue),
        isBuff = !isArr && isBuffer(srcValue),
        isTyped = !isArr && !isBuff && isTypedArray(srcValue);

    newValue = srcValue;
    if (isArr || isBuff || isTyped) {
      if (isArray(objValue)) {
        newValue = objValue;
      }
      else if (isArrayLikeObject(objValue)) {
        newValue = copyArray(objValue);
      }
      else if (isBuff) {
        isCommon = false;
        newValue = cloneBuffer(srcValue, true);
      }
      else if (isTyped) {
        isCommon = false;
        newValue = cloneTypedArray(srcValue, true);
      }
      else {
        newValue = [];
      }
    }
    else if (isPlainObject(srcValue) || isArguments(srcValue)) {
      newValue = objValue;
      if (isArguments(objValue)) {
        newValue = toPlainObject(objValue);
      }
      else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {
        newValue = initCloneObject(srcValue);
      }
    }
    else {
      isCommon = false;
    }
  }
  if (isCommon) {
    // Recursively merge objects and arrays (susceptible to call stack limits).
    stack.set(srcValue, newValue);
    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
    stack['delete'](srcValue);
  }
  assignMergeValue(object, key, newValue);
}

_695‍.d(baseMergeDeep);
