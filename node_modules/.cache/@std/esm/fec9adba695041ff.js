"main";let ListCache;_695‍.w('./_ListCache.js',[["default",function(v){ListCache=v}]]);let stackClear;_695‍.w('./_stackClear.js',[["default",function(v){stackClear=v}]]);let stackDelete;_695‍.w('./_stackDelete.js',[["default",function(v){stackDelete=v}]]);let stackGet;_695‍.w('./_stackGet.js',[["default",function(v){stackGet=v}]]);let stackHas;_695‍.w('./_stackHas.js',[["default",function(v){stackHas=v}]]);let stackSet;_695‍.w('./_stackSet.js',[["default",function(v){stackSet=v}]]);






/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

_695‍.d(Stack);
